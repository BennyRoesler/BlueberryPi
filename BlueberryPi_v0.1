#! /usr/bin/env python3
import socket
import argparse
import bluetooth
import scanBlueberry as scanB

from paramiko import SSHClient
from scp import SCPClient

import random
import os

#Verifies if input is a UUID of style 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'
def isUUID(input):
    if input.count("-")!=4:
        return False
    if len(input) !=36:
        return False
    for section in input.split("-"):
        for char in section:
            if (char>"F" or (char<"A" and not char.isdigit())) or (char >= "a" and char <= "z"):
                return False
    return True

#Verifies if input is a MAC address of style 'XX:XX:XX:XX:XX:XX'
def isMACAddress(input):
    if input.count(":")!=5:
        return False
    for section in input.split(":"):
        for char in section:
            if char.upper()>"F" or (char.upper()<"A" and not char.isdigit()) or len(section)!=2:
                return False
    return True

# SCP a file to the CS department
def scp(csvlocation="/tmp/Blueberry-DiscoveredDevices.csv", host="bangkok.cs.colostate.edu", remotepath="/tmp"):
    ssh = SSHClient()
    ssh.load_system_host_keys()
    ssh.connect(host, username="roeslerb", key_filename="BlueberrySSH")
    scp = SCPClient(ssh.get_transport())
    scp.put(csvlocation, remote_path=remotepath)
    scp.close()

def ascii_art():
    dir = 'ascii_art'
    filename = random.choice(os.listdir(dir))
    path = os.path.join(dir, filename)

    art = open(path, "r")
    print(art.read())


#Main section
def main():
    #Parse arguments
    parser = argparse.ArgumentParser(description='Scan for nearby Bluetooth devices, gather information on the device services and manufacturer, log to output file')
    parser.add_argument('-m', '--mac', metavar='<MAC address>',
                        help='MAC address of specific device to scan services of. If provided, will not initiate primary scan')
    parser.add_argument('-t', '--time', metavar='<time to scan>', type=int, default=10,
                        help='Set length of time to scan, default is 10 seconds.')
    parser.add_argument('-o', '--output', metavar='<output csv>', default='/tmp/Blueberry-DiscoveredDevices.csv',
                        help='Name of CSV file to output data. Will create if it does not exist, \
                        otherwise will add to the existing given file. Default is /tmp/Blueberry-DiscoveredDevices.csv')
    parser.add_argument('-a', '--async', action='store_true',
                        help='Initiates scan to be done asynchronously')


    args = parser.parse_args();

    #Print random ASCII art
    ascii_art()

    #initiate scanning based on flags
    if args.mac:
        scanB.scanOneService(args.mac)
    else:
        if args.async:
            scanB.asyncScan(args.time, args.output)
        else:
            scanB.continuousScan(args.time, args.output)

if __name__ == '__main__':
    main()
