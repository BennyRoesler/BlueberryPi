#! /usr/bin/env python3
import socket
import argparse
import bluetooth
import scanBlueberry as scanB

#Verifies if input is a UUID of style 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'
def isUUID(input):
    if input.count("-")!=4:
        return False
    if len(input) !=36:
        return False
    for section in input.split("-"):
        for char in section:
            if (char>"F" or (char<"A" and not char.isdigit())) or (char >= "a" and char <= "z"):
                return False
    return True

#Verifies if input is a MAC address of style 'XX:XX:XX:XX:XX:XX'
def isMACAddress(input):
    if input.count(":")!=5:
        return False
    for section in input.split(":"):
        for char in section:
            if char>"F" or (char<"A" and not char.isdigit()) or len(section)!=2:
                return False
    return True

#Parse arguments, verify valid format
def parseArgs():
    parser = argparse.ArgumentParser(description='Scan given MAC address for Bluetooth vulnerabilites, or scan for all bluetooth devices in range and in discovery mode.')
    parser.add_argument('MAC', nargs='?', help='MAC Address of Bluetooth device to scan for vulnerabilites')

    args = parser.parse_args();
    if args.MAC is not None:
        if isMACAddress(args.MAC):
            return args.MAC
        else:
            print("Usage: BlueberryPi_v0.1 [XX:XX:XX:XX:XX:XX]")
            exit(1)
    else:
        return None

#Main section
def main():

    #Parse arguments
    input = parseArgs();

    #Stuff
    if(input is not None):
        scanB.scanMAC(input)
    else:
        scanB.scanAll()
        scanB.scanAllServices()


if __name__ == '__main__':
    main()

    # from bluetooth.ble import DiscoveryService
    #
    # service = DiscoveryService()
    # devices = service.discover(2)
    #
    # for address, name in devices.items():
    #     print("Name: {}, address: {}".format(name, address))
